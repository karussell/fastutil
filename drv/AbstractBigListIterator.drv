/*		 
 * Copyright (C) 2002-2013 Sebastiano Vigna 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 */


package PACKAGE;

import java.util.ListIterator;
import it.unimi.dsi.fastutil.BigListIterator;

/**  An abstract class facilitating the creation of type-specific {@linkplain it.unimi.dsi.fastutil.BigListIterator big-list iterators}.
 *
 * <p>This implementation provides (deprecated) implementations of {@link ListIterator#previousIndex()} and {@link ListIterator#nextIndex()} that
 * just invoke the corresponding {@link BigListIterator} methods.
 *
 * @see java.util.ListIterator
 * @see it.unimi.dsi.fastutil.BigListIterator
 */

public abstract class KEY_ABSTRACT_BIG_LIST_ITERATOR KEY_GENERIC extends KEY_ABSTRACT_BIDI_ITERATOR KEY_GENERIC implements KEY_BIG_LIST_ITERATOR KEY_GENERIC {

	protected KEY_ABSTRACT_BIG_LIST_ITERATOR() {}

#if #keys(primitive)
	/** Delegates to the corresponding type-specific method. */
	public void set( KEY_GENERIC_CLASS ok ) { set( ok.KEY_VALUE() ); }
	/** Delegates to the corresponding type-specific method. */
	public void add( KEY_GENERIC_CLASS ok ) { add( ok.KEY_VALUE() ); }
#endif

	/** This method just throws an  {@link UnsupportedOperationException}. */
	public void set( KEY_GENERIC_TYPE k ) { throw new UnsupportedOperationException(); }
	/** This method just throws an  {@link UnsupportedOperationException}. */
	public void add( KEY_GENERIC_TYPE k ) { throw new UnsupportedOperationException(); }

	/** This method just iterates the type-specific version of {@link #next()} for at most
	 * <code>n</code> times, stopping if {@link #hasNext()} becomes false.*/

	public long skip( final long n ) { 
		long i = n;
		while( i-- != 0 && hasNext() ) NEXT_KEY(); 
		return n - i - 1;
	}

	/** This method just iterates the type-specific version of {@link #previous()} for
	 * at most <code>n</code> times, stopping if {@link
	 * #hasPrevious()} becomes false. */
	public long back( final long n ) { 
		long i = n;
		while( i-- != 0 && hasPrevious() ) PREV_KEY(); 
		return n - i - 1;
	}

}
