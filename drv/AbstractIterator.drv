/*		 
 * Copyright (C) 2002-2013 Sebastiano Vigna 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 */


package PACKAGE;

/**  An abstract class facilitating the creation of type-specific iterators.
 *
 * <P>To create a type-specific iterator you need both a method returning the
 * next element as primitive type and a method returning the next element as an
 * object. However, if you inherit from this class you need just one (anyone).
 *
 * <P>This class implements also a trivial version of {@link #skip(int)} that uses
 * type-specific methods; moreover, {@link #remove()} will throw an {@link
 * UnsupportedOperationException}.
 *
 * @see java.util.Iterator
 */

public abstract class KEY_ABSTRACT_ITERATOR KEY_GENERIC implements KEY_ITERATOR KEY_GENERIC {

	protected KEY_ABSTRACT_ITERATOR() {}

#if #keys(primitive)

	/** Delegates to the corresponding generic method. */
	public KEY_TYPE NEXT_KEY() { return next().KEY_VALUE(); }

	/** Delegates to the corresponding type-specific method. */
	public KEY_GENERIC_CLASS next() { return KEY_CLASS.valueOf( NEXT_KEY() ); }

#endif

	/** This method just throws an  {@link UnsupportedOperationException}. */
	public void remove() { throw new UnsupportedOperationException(); }

	/** This method just iterates the type-specific version of {@link #next()} for at most
	 * <code>n</code> times, stopping if {@link #hasNext()} becomes false.*/

	public int skip( final int n ) { 
		int i = n;
		while( i-- != 0 && hasNext() ) NEXT_KEY(); 
		return n - i - 1;
	}
}
